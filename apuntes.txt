sudo dpkg -i (ubicacion descarga) instala un 

Tema 1

VCS sistema de control de versiones

 - Maquina del tiempo
	Permite ir atrás y adelante en instantáneas (commit) creadas 	anteriormente de dicho código

 -  Programación Colaborativa
	Permite a varias personas trabajar sobre el mismo codigo

git config –-global user.name
	muestra el nombre que usaremos en los commit
git config –-global user.email
	muestra el email que usaremos en los commit

un repositorio contiene ramas y una rama es una cadena de commits
master es la rama principal

git init se usa en un directorio una vez y se usa para crear un repositorio vacio. Solo tiene una rama vacia, sin commits.

Para crear un commit hay que dar 2 pasos

	1.  movemos del directorio de trabajo al area de preparacion 	todo lo que queramos añadir al repertorio con git add (git 	add . añade todo el directorio actual, no es lo mismo que git 
	add * porque no añade los archivos ocultos)
	en este instante existe 2 archivos, si modificamos el 	original no se cambia el del area de preparacion. Si añadimos 	el original con otro git add, machaca al que esta en el area 	de preparacion. Tambien podemos descartar los cambios del 	directorio de trabajo con git checkout 
	con git reset head (nombrearchivo) sacamos el archivo del 	area de preparacion 

con git status nos da la situacion actual

	2. una vez añadido al area de preparacion, usamos git commit 	-m “mensaje a introducir” si es el primer commit deberiamos 	llamarlo “Initial commit”

el nombre de la rama apunta al commit mas reciente

el mensaje en el commit deberiamos añadir los cambios efectuados
las inserciones y los borrados se refieren a lineas

para ignorar archivos se usa el archivo .gitignore puedes usar el nombre o expresiones regulares

git log muestra la lista de todos los commits de la rama

tenemos creado un alias (atajo) con git lg que nos muestra el log mas conciso
el alias esta guardado en ~/.gitconfig

con git show vemos en detalle el contenido de un commit

HEAD ^ apunta al anterior HEAD
HEAD ~n apunta al head -N
	
git diff muestra la diferencia entre ficheros

si ponemos solo git diff muestra la diferencia entre el directorio de trabajo y el stage o con el HEAD si el stage esta vacio

para comparar stage con commit usamos git diff --staged ó –cached

para comparar dos commits ponemos git diff x..n siendo x y n los id de los commits, siendo x el inicial y n el final

deatached head (head deascoplado) no apunta una rama.

Git chechkout + id commit apunta el head a dicho commit

cuando añades un elemento al .gitignore si tiras para atrás el elemento no se borra, es decir, viaja al pasado, pero el gitignore no viaja al pasado

no se debe cambiar un commit pasado, solo puedes coger cosas de un commit

para volver a un commit anterior podemos hacer git revert que consiste en revertir los cambios hechos en un commit

si es el ultimo commit el que quieres anular podemos usar git reset + id del commit (--hard si queremos cambiar tambien el directorio de trabajo)

o si es el ultimo tambien se puede editar sobre ese ultimo commit y git commit --amend -m “mensaje”

podemos etiquetar commits con git tag + etiqueta + id del commit, asi no perderiamos commits que esten por detras de un reset(aun asi para verlo tendriamos que usar git lg –-all). Para borrrar etiquetas usamos git tag -d nombre

git rm = rm + git add

git mv = mv + git add

git no controla directorios vacias si queremos controlarlo creariamos un archivo .gitkeep en el directorio

Cuando trabajemos con multiples directorios y subdirectorios siempre debemos trabajar con git en la raiz

git branch te dice que ramas hay y en que ramas te encuentras, la rama en la que te encuentras la marca con un asterisco *
 
con git chechout -b nombre creamos una nueva rama que recien creada apuntara al commit que se este apuntando en este momento. Una vez creada te pasa a esa rama. Para que no nos pase a esa rama tendriamos que usar git branch nombre.

Para moverse a una rama usamos git checkout nombre

para eliminar una rama usamos git branch -d nombre, no podemos estar en esa rama si queremos borrarla, si queremos borrarla con todos los commits deberiamos usar git branch -D nombre

fast-forward merge: se puede aplicar cuando se quieren fusionar dos ramas y cuando los commits de la rama A esten contenidos en la rama B para hacerlo nos movemos a la rama que va a cambiar 
en este caso la A y una vez ahi usamos git merge + nombre de la rama, en este caso B.

recursive merge o padre multiple: nos movemos a la rama que queremos cambiar, la rama A y escribiriamos git merge B 
Solo se puede hacer si los cambios en las dos ramas son compatibles. Para forzar esta estrategia deberiamos usar 
git merge –-no-ff B. en caso de conflicto tendriamos que resolverlo nosotros.

para reescribir un commit usamos rebase, solo debemos hacerlo sobre commits que no hayamos compartido para cancelarlo usamos git rebase --abort

tambien podemos usar squash que haria lo mismo que el rebase, solo que el rebase por cada commit haria un commit, y el squash haria solo 1 commit

GITHUB

separar palabras en repositorios con -, todo en minuscula

git remote muestra los repositorio remotos que tenemos
git remote add origin (es el nombre del remote por convenio) url
git remote show te muestra los detalles de un remote
para eliminar un remoto git remote remove (nombre de remoto)
con git push empujamos los commits que estan en local y no estan en remoto
la opcion -u del git push es para hacerle ver al remoto que las ramas master de local y remota son la misma
si lo pusieramos la rama en local seria una rama de seguimiento, es decir, la rama local estaria actualizada de todo cambio en la remota
de ahi en adelante solo usariamos git push

con git clone creamos un repositorio local con un remoto si ponemos despues de la url un nombre le ponemos ese nombre en la carpeta
origin/master representa localmente al repositorio remoto es decir, la ultima vez que se actualizo el remoto el master apuntaba a ese commit (no esta sincronizado en tiempo real y no se puede mover)
origin/HEAD solo aparece cuando haces un clone y te dice cual es la rama principal del repositorio remoto
con git remote show origin se conecta a internet y comprueba el remoto y el local

con git fetch te traes commits del remoto y despues tenemos que hacer un git merge o un git rebase

git pull es un git fetch + un git merge si queremos hacerlo con rebase tendriamos que poner git pull --rebase

para eliminar la rama remota primero la eliminamos en local y despues git push --delete origin nombreDeRama o git push origin :nombreDeRama (este ultimo tambien borra etiquetas remotas)
para eliminar punteros locales que han sido eliminados usamos git remote prune origin o git push origin :nombreDeRama
con git push no pusheamos etiquetas, para pushearlas tenemos que poner git push origin etiqueta ó  git push --tags (pushea todas las etiquetas)

una pull request es una peticion que le hacemos al dueño del repositorio para que integre cambios en una rama

las issues sirven para que queden constancia en el repositorio que existe una anomalia, tambien puede ser una mejora. Lo suyo seria llamar a la rama  (numero de incidencia)-(descripcion corta)
  
si queremos generar una version para el usuario final deberemos crear una release

el fork sirve para hacer una copia clonada del repositorio y trabajar en ese repositorio. Cuando pusheas una rama forkeada hace automaticamente un pull request. 

para actualizar repositorios remotos: Git stash, git pull y git stash pop

hub create (nombre repositorio) crea un repositorio remoto con el repositorio local

Tema 3

cookies:
tienen un limite de 50 por sitio, 4kb de tamaño
estan compuesta por nombre,contenido,dominio,ruta, enviar para tipos de conexion, accesible para secuencias de comandos y caducidad.



Tema 4

en php vamos por snake case, por ejemplo is_null()

para ejecutar codigo php : php + archivo en la terminal
si ponemos php -a pasamos al modo interactivo y le pasamos las ordenes directamente
con el script hemos instalado otro interprete llamado psysh
con la asignacion por referencia $x=$y si cambiamos el valor de y cambiamos el de x, si eliminamos una no eliminamos la otra
$argc te dice los argumentos que le pasas, siendo 1 cuando ejecutas el script y n+1 por n elementos que le pasas
bool=booleanos, int =enteros, float=decimal
potencia = 2 ** 3
concatenacion = "hola"." pepe"
strlen te devuelve los bytes de una cadena
strrev invierte cadena
strpos te devuelve la primera posicion de una subcadena dentro de una cadena
strrpos te devuelve la ultima posicion de una subcadena dentro de una cadena
substr devuelve una subcadena de una cadena
trim elimina espacios de principio y final de cadena
para trabajar con cadenas especiales deberemos usar las funciones mb_(funcion)
para acceder a un caracteren una determinada posicion de una cadena usamos mb_substr(cadena,posicion,1)

para comprobar la nulidad de una variable usariamos is_null($x)

una variable es nula si se le ha asignado null, si aun no tiene valor o si se le ha hecho unset

notice<warning<errores ; cada cual es mas ""peligroso"" que el anterior

comprobaciones de tipos 

gettype() te de vuelve el tipo

is_(tipo) te devuelve si una variable es de un tipo en concreto

comprobaciones de valores

is_numeric() te devuelve si una variable es un numero o un string numerico

ctype_*() devuelve si en una variable todos los caracteres son *  esto es lo mas util de todo 

conversiones de tipos= casting de java de normal no suele ser necesaria
tambien podemos usar *val()

https://www.php.net/manual/es/language.types.type-juggling.php


comparaciones de datos
https://www.php.net/manual/es/language.operators.comparison.php
https://www.php.net/manual/es/types.comparisons.php

a??b = devuelve a si no es nulo, si es nulo devuelve b

condicion?: valor falso (esto es una contraccion del ternario)

podemos definir constantes con define("nombre en mayusculas",valor) o const "nombre en mayusculas"=valor;



Tema 5

Estructuras de control
https://www.php.net/manual/es/language.control-structures.php

if (condicion):
----
elseif(condicion):
----
else:
----
endif;

switch():
---
case()
---
endbreak;

while(condicion):
---
endwhile;

for():
---
endfor;


la diferencia entre un require y un include es que el include no para el programa pero el require si 


require_once y include_once abren los archivos una sola vez

en el require|include el nombre tiene que estar con el nombre completo

al pasar al siguiente archivo el interprete se pone en modo html

un archivo que incluyes puede devolver un valor (con return) se guarda con $x= require"fichero.php" devuelve false en caso de fallo

Cuando se incluye un archivo, el código que contiene hereda el ámbito de las variables de la línea en la cual ocurre la inclusión. Cualquier variable disponible en esa línea del archivo que hace la llamada,
estará disponible en el archivo llamado, desde ese punto en adelante. Sin embargo, todas las funciones y clases definidas en el archivo incluido tienen el ámbito globa

despues de buscar el fichero en el directorio actual lo busca en el include_path .:/usr/share/php eso pasa cuando no indicas una ruta

para asegurarte que no va a mirar en el include_path debemos poner el ./ delante del nombre del fichero

la constante __DIR__ deberiamos de usarla con los require por ejemplo require __DIR__ . "sub/dos.php"

para llamar a requires

require __DIR__ . "/script";

isset(): determina si una variable esta definida y no es null

empty(): determina si una variable esta vacia. Una variable esta vacia si no existe o si su valor esta vacio empty($c)&&!is_numeric($c) te vale para las cadenas vacias y falsas, si no ponemos el !isnumeric entrarian las cadenas con 0

var_dump(): te dice que contiene esa variable y el tipo de la variable. si esta en un script te dice ademas la ruta del script y la linea en la que esta a veces es mejor usar el print_r cuando hay datos muy anidados

Arrays:


son dinamicos y se pueden crear de tres formas 

array() viejo

se llama la funcion array y se le da los valores: array("juan",5,2,6.5)

[] moderno

se llama a [] y se le da los valores: ["juan".5,2,6.5]

$a[] = x => añade el elemento x al final del array. Exista $a o no

count(array)= te dice el numero de elementos que tiene

con unset() tambien eliminamos el elemento. si eliminamos una posicion que no es la ultima borramos tanto el valor como el indice
es decir unset($a[2]) echo $a => estarian todos los indices menos el 2 

Todos los elementos se añaden siempre por el final

por este motivo deberiamos recorrer el array usariamos foreach:

foreach($a as $k=>$v){}

Funciones de Arrays:

https://www.php.net/manual/es/book.array.php

sort($array):Te ordena el array que le envias, no te devuelve otro array, te devuelve un booleano. Te borra las claves, empiezan por 0 y termina por count($array)

rsort($array):Igual que el anterior solo que ordena en orden inverso

asort($array): Ordena un array y mantiene la asociacion de indices.

arsort($array): Igual que el anterior solo que ordena en orden inverso

ksort($array): Ordena un array por claves

krsort($array): Igual que el anterior solo que ordena en orden inverso

natsort($array): Ordena de forma natural, no lexicofrafico

natcasesort($array) Igual que el anterior solo que es insensible a mayusculas y minuscula

usort() uksort() uasort(): Ordena por un orden definido por el usuario ya lo veremos cuando seamos mas inteligentes si eso

para mostrar arrays deberiamos usar print_r()

array_merge($array, $array2...): Combina dos o mas arrays, si son claven String y son iguales se sobreescriben, antiguo se sobreescribe

$array + $array2: Combina dos arrays, si las claves son iguales, numericas o no, prevalece el primero

para saber si un elemento de un array existe podemos usar isset(), pero lo mejor es usar array_key_exists(clave,array) asi sabremos que existe esa clave aunque su valor sea nulo

Pero lo que deberiamos usar es isset($a[1])||array_key_exists(1,$a)

el casting de array (array) x mola con objetos

array_keys(): Devuelves las claves de un array

array_values(): Devuelve los valores de un array

array_combine(): Recibe dos arrays, devuelve un array, siendo el primer array las claves y el segundo los valores

en una aplicacion de consola tenemos dos variables $argc y $argv

$argc= numero de argumentos
$argv= array con los argumentos. en la posicion 0 esta el nombre del fichero 

para terminar la ejecucion de un script usamos la funcion exit().

exit(0)= Exito
exit(!=0)=Error 

tambien podemos terminarl el programa con die();

en los errores lo suyo es que pongamos codigos de salidas diferentes por cada error

ctype_digit()=> podemos comprobar que es un numero entero positivo

funciones definidas por el usuario:

pueden tener efectos laterales devolver y recibir parametros

deberiamos definir las funciones al principio del script (se pueden poner donde quieras pero la regla de estilos dicen que tiene que estar arriba)

se crean asi: +
function <nombre de funcion>(<parametros>)<: tipo de retorno(opcional)> 
{
	<codigo>
	return juan;(opcional, si no devuelve nada, devuelve null)
}

paso por referencia cambia el valor de lo que se pasa, para usarlo tenemos que poner un & delante

function nombre($m=5)=> por defecto $m tendria el valor 5 no puede ser function nombre($x=5,$y), primero son los no por defecto y despueslos que si tienen valor por defecto

ambitos:

ambito simple al archivo (o """global"""): La variable empieza a existir desde que la creas hasta el final del archivo(o hasta que la destruyes). 
Cuando hace require la variable de dentro del archivo 1 esta en el 2. Las variables dentro de una funcion son locales.
Para acceder desde una funcion a una variable global usamos global <variable>

ambito local: pues ambito localxd

ambito superglobales: son variables globales que existen en todas partes sin declararlas como global. 
https://www.php.net/manual/es/language.variables.superglobals.php


si en la funcion ponemos (int $x, int $y) hace una conversion a entero, no es un checkeo es un casting aunque checkea que no sea nulo, si le pones ? delante tambien entra los nulos

en caso de array si hace un checkeo

tipado estricto: para que el interpreteno haga conversion de tipos debemos de poner en la primera linea ejecutable del archivo "declare(strict_types=1)"
se pone en el archivo que llama a la funcion, no en la funcion donde la declaro

Tema 6 
SAPI: 
	- el contexto en elq ue se ejecuta el interprete
	- el entorno que establece la interfaz de comunicacion entre el script y el exterior

dependiendo del contexto tienen sentido algunas variables (por ejemplo) y otras no

CLI Comand line interface (La consola) $argc,$argv

Apache Servidor Web $_GET $_POST 

CGI Common Gateway interface

PHP tiene configuracion para cada SAPI, dentro de cada sapi esta en conf.d y php.ini

dentro de conf.d hay varias extensiones, para activarlas hay que usar sudo phpenmod [version] [sapi] nombredemodulo

php.ini configuracion

todos te ponen los valores comunes el valor por defecto, el valor sugerido en desarrolllo y el valor suferido en produccion

error_reporting => que errorres vas a mostrar por salida

display_errors=> muestra errores

display_startups_errors=> muestra errores 

date.timezone='UTC' debemos trabajar en UTC

crear carpeta llamada web en el home del usuario

Para arrancar el servidor integrado php -s (direccion y puerto(en local localhost:8000))   [no usar sudo]

<?= ?> equivale a un echo 

$_GET es un array que contiene los parametros que se han enviado mediante get y sus valores(Mediante el name, no el ID)

extract recibe un array asociativo y crea variables , es decir si tenemos un array con $vars=["a"=> 1,b=>2] y extract($vars) crea $a y $b con valores 1 y 2 respectivamente
compact hace lo contrario del extract
array_map(funcion,array) hace a todos los elementos de la funcion una determinada funcion "callable"

Objetos
$d=new DateTime(); crea un objeto DateTime
en PHP se llaman a los metodos y atributos de un objeto con ->
$d->format("Y-m-d H:i:s"); muestra por pantalla "2019-11-05 17:51:14"

$d instanceof DateTime devuelve si el objeto $d es instancia de DateTime
pata accder a constantes de clases usamos el operador de resolucion de ambito ::
DateTime::ATOM || $d::ATOM devuelve "Y-m-d\TH:i:sp"
$a==$b son instancias de la misma clase y las propiedades tienen los mismos valores
$a===$b son dos objetos identicos , es decir, son iguales tanto en propiedades como en referencias
para pasar un argumento por referencia a otro objeto usamos $c =& $b en este caso $b y $c son dos nombres para una misma variable
si hacemos $b= new stdClass(); entonces $c tambien seria una new stdClass();

$b = clone $a crea una copia de un objeto (No tienen la misma referencia)

un objeto puede tener dos tipos de propiedades determinadas y dinamicas
determinadas= son las definidas por la clase del objeto
dinamicas se crean asignandole valores

get_object_vars(objeto) te devuelve todas las propiedades de un objeto

Las instancias de DateTime contienen instantes de tiempo
Las instancias de DateInterval contienen un intervalo de tiempo
Las instancias de DateTimeZone contienen una zona horaria

DateTime::setTimezone recibe una instancia de DateTimeZone y devuelve una instancia de DateTime. Hacemos esto porque el metodo es estatico
y por lo tanto lo llamamos desde el objeto,  no desde la instancia
DateTimeInmutable nunca cambia, solo devuelven instancias de DateTimeInmutable

Excepciones

En php hay errores y excepciones ambas subsclases de Throwable
En excepciones hay dos clases, Exception y Error. Estas ultimas eran errores convertidos a errores. Se tratan como una excepcion pero a la hora de mostrarla se convertira en Error 
Las excepciones son excepciones que tu creas mientras que las de error son las creadas por php

para capturar los Errores que no sean subclases de Throwable usamos ErrorException
ErrorException solo existe para convertir los errorres en Excepciones y viene a sustituir a set_error_handler()
ErrorException hereda de Exception y a su vez Exception hereda de Throwable

set_error_handleres una funcion que recibe el nombre d euna funcion

la funcion recibe la severidad, el mensaje el fichero y la linea

esta misma funcion (en el ejemplo de clase) devuelve una nueva ErrorException
 
Tema 7 persistencia de datos con PHP 
sudo -u postgres createuser -P usuario  
sudo -u postgres createdb datos
psql -h localhost -U (usuario) -d (base de datos)
cuando pone => es que no somos superusuarios si pone =# si lo somos

para crear claves ajenas de empleados a departamentos la llamaremos departamento_id

en ~/.pgpass con chmod 600 ~/.pgpass > localhost:5432:*:usuario:usuario

PDO =PHP Data Objects
son unas clases que nos permiten acceder a una base de datos
<?= phpinfo() ?> te genera una pagina php con toda la informacion de php

new PDO(DSN,usuario,contraseña)
DSN=Define los parametros de conexion excepto usuario y contraseña seria:'pgsql:host=localhost;dbname=datos';
la instancia seria: $pdo= new PDO('pgsql:host=localhost;dbname=datos','usuario','usuario')
la conexion se cierra cuando se elimina la instancia, como un unset o $pdo=null
$sent = $pdo->query('SELECT * FROM departamentos')
crea una sentencia de PDO que es una orden que quieres ejecutar, no se ejecuta
$sent->fetch fetchColumn fetchALL (fetch() 1 fila, fetchColumn(numero de columna)= Columna, fetchAll()=un array bidimensional con todo)
con fetch devuele un array y devuelve los valores duplicados con distintos indices, tiene un indice numerico y un indice de la clave de pgsql
si lo llamas mas veces te devuelve las filas siguientes hasta que se agota y hay que llamarlo otra vez 
ir pasando filas y mostrar el array:
foreach ($sent as $fila) { print_r($fila); }
Si en sql el dato es NULL el PDO lo convierte en php a null
Si en sql el dato es bool el PDO lo convierte en php a bool
Si en sql el dato es entero(no numeric) el PDO lo convierte en php a int siempre y cuando ese entero quepa en un entero de php
el resto lo convierte a String 
podemos devolver dos variables en un metodo con [$x,$y]=function(){return[3,4];}
$pdo-> exec() ejecuta una orden que no sea de consulta

para crear cabeceras usamos el metodo header('Location: index.php')
el nulo en sql siginifica que no hay valor

para crear cookies usamos la funcion setcookie, que crea una si no existe y si no la modifica
usaremos la funcion time para establecer la fecha de caducidad de la cookie

para encriptar contraseñas usaremos passwordhash()

sudo -u postgres psql -d template1 
create extension pgcrypto
para meterle el pgcrypto en psql

para empezar una sesion llamaremos a la funcion session_start() que crea una sesion o continua la ya existente
Tiene que estar al principio del script

para finalizar una sesion usamos sesion_destroy pero habria que hacer mas cosas. en un fichero terminar.php seria asi:

<?php
session_start();
$_sesion=[];
$params=session_get_cookie_params();
kosetcookie(session_name(),"",1,$params["path"],$params["domain"],$params["secure"],$params["httponly"]);
sesion_destroy()
header("location:index.php)


Para evitar el xss saneamos la salida con la funcion htmlspecialchars() que lo que hace es transformar el <> &' y "
el htmlentities() transforma todos los caracteres que tengan entidad. Usaremos el primero.
htmlspecialchars($cadena,ENT_QUOTES|ENT_SUBSTITUTES)

Tema 9 Programación Avanzada en PHP


visibilidad en php public private protected

todos los metodos y atributos llevan visibilidad

Si no le pasas argumentos a una clase puedes instanciarla sin parentesis

los atributos privados deberian estar escritos con $_(nombre)

el constructor de la clase se llama __constructor()

tambien hay destructores que se llama __destruct() (Normalmente no se usa)